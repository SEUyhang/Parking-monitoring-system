<?xml version="1.0"?>
<!-- rostopic pub -1 /ardrone_1/command/pose geometry_msgs/PoseStamped '{header: {seq: 1, stamp: 1, frame_id: zhk}, pose: {position: {x: 10.0, y: 10.0, z: 10.0}}, pose: {orientation: {x: 0.0, y: 0.0, z: 0.0, w: 0.0}}}' -->
<launch>
    <!-- 指定world_name变量，默认是parking_space世界模型 -->
    <arg name="world_name" default="basic"/>
    <arg name="mav_name" value="ardrone"/>
    <!-- 环境变量的值 -->
    <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
    <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/resource"/>
    <!-- 包含一个empty_world.launch启动文件，并传入参数world_name和paused，用来指定自己的世界模型 -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(find rotors_gazebo)/worlds/$(arg world_name).world"/>
    </include>
    <!-- 第一架无人机的配置 -->
    <group ns="ardrone_1">
        <!-- 包含一个无人机生成启动文件，用spawn_mav生成一个无人机，下面的arg标签全都是用来给spawn_mav.lauch传参数用的-->
        <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
            <!-- 无人机序列号为number，多个无人机时用来区分 -->
            <arg name="number" value="1"/>
            <!-- 选择无人机型号，这里用的是ardrone_base型号，无人机的模型存放在/home/yhang/rotors_ws/src/rotors_simulator/rotors_simulator/rotors_description/urdf里-->
            <arg name="mav_name" value="ardrone" />
            <!-- 添加一个vi传感器，vi传感器是个啥？ -->
            <arg name="model" value="$(find rotors_description)/urdf/mav_with_vi_sensor.gazebo" />
            <!-- 初始状态的y坐标 -->
            <arg name="y" value="0.0"/>
        </include>
        <!-- 控制节点 -->
        <node name="lee_position_controller_node" pkg="rotors_control" type="lee_position_controller_node" output="screen">
            <rosparam command="load" file="$(find rotors_gazebo)/resource/lee_controller_ardrone.yaml" />
            <rosparam command="load" file="$(find rotors_gazebo)/resource/ardrone.yaml" />
            <remap from="odometry" to="odometry_sensor1/odometry" />
        </node>
        <!-- pubilisher的节点都是给话题发布消息的节点 -->
        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
        <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
        <node name="waypoint_publisher" pkg="rotors_gazebo" type="waypoint_publisher" output="screen" args="1 1 1 0 5"/>
    </group>
</launch>
